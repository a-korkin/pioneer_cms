// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220412033258_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Admin.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("идентификатор");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_type")
                        .HasComment("тип сущности");

                    b.HasKey("Id", "TypeId")
                        .HasName("pk_cd_entities");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_cd_entities_f_type");

                    b.ToTable("cd_entities", "admin");

                    b.HasComment("сущности");
                });

            modelBuilder.Entity("Domain.Entities.Admin.EntityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("идентификатор");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_schema")
                        .HasComment("схема");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_table")
                        .HasComment("таблица");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_title")
                        .HasComment("название");

                    b.HasKey("Id")
                        .HasName("pk_cs_entity_types");

                    b.ToTable("cs_entity_types", "admin");

                    b.HasComment("типы сущностей");
                });

            modelBuilder.Entity("Domain.Entities.Admin.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("идентификатор");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_firstname")
                        .HasComment("имя");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_lastname")
                        .HasComment("фамилия");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_middlename")
                        .HasComment("отчество");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_password")
                        .HasComment("пароль");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_type")
                        .HasComment("тип сущности");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_username")
                        .HasComment("имя пользователя");

                    b.HasKey("Id")
                        .HasName("pk_cd_users");

                    b.HasIndex("Id", "TypeId")
                        .HasDatabaseName("ix_cd_users_id_f_type");

                    b.ToTable("cd_users", "admin");

                    b.HasComment("пользователи");
                });

            modelBuilder.Entity("Domain.Entities.Admin.Entity", b =>
                {
                    b.HasOne("Domain.Entities.Admin.EntityType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cd_entities_cs_entity_types_f_type");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.Admin.User", b =>
                {
                    b.HasOne("Domain.Entities.Admin.Entity", null)
                        .WithMany()
                        .HasForeignKey("Id", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cd_users_cd_entities_entityid_entitytypeid");
                });
#pragma warning restore 612, 618
        }
    }
}
